import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated return type of AcceptInvite */
export type AcceptInvitePayload = {
  __typename?: 'AcceptInvitePayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of CreateGroup */
export type CreateGroupPayload = {
  __typename?: 'CreateGroupPayload';
  errors?: Maybe<Array<Scalars['String']>>;
  group?: Maybe<Group>;
};

/** Autogenerated return type of CreateIssueBoard */
export type CreateIssueBoardPayload = {
  __typename?: 'CreateIssueBoardPayload';
  errors?: Maybe<Array<Scalars['String']>>;
  issueBoard?: Maybe<IssueBoard>;
};

/** Autogenerated return type of CreateIssueLabel */
export type CreateIssueLabelPayload = {
  __typename?: 'CreateIssueLabelPayload';
  errors?: Maybe<Array<Scalars['String']>>;
  issueLabel?: Maybe<IssueLabel>;
};

/** Autogenerated return type of CreateIssue */
export type CreateIssuePayload = {
  __typename?: 'CreateIssuePayload';
  errors?: Maybe<Array<Scalars['String']>>;
  issue?: Maybe<Issue>;
};

/** Autogenerated return type of CreateUser */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  accessToken?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  user?: Maybe<User>;
};

/** Autogenerated return type of DeclineInvite */
export type DeclineInvitePayload = {
  __typename?: 'DeclineInvitePayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of DeleteGroup */
export type DeleteGroupPayload = {
  __typename?: 'DeleteGroupPayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of DeleteIssueBoard */
export type DeleteIssueBoardPayload = {
  __typename?: 'DeleteIssueBoardPayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of DeleteIssueLabel */
export type DeleteIssueLabelPayload = {
  __typename?: 'DeleteIssueLabelPayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of DeleteIssue */
export type DeleteIssuePayload = {
  __typename?: 'DeleteIssuePayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of DeleteUser */
export type DeleteUserPayload = {
  __typename?: 'DeleteUserPayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of EditGroup */
export type EditGroupPayload = {
  __typename?: 'EditGroupPayload';
  errors?: Maybe<Array<Scalars['String']>>;
  group?: Maybe<Group>;
};

/** Autogenerated return type of EditIssueBoard */
export type EditIssueBoardPayload = {
  __typename?: 'EditIssueBoardPayload';
  errors?: Maybe<Array<Scalars['String']>>;
  issueBoard?: Maybe<IssueBoard>;
};

/** Autogenerated return type of EditIssueLabel */
export type EditIssueLabelPayload = {
  __typename?: 'EditIssueLabelPayload';
  errors?: Maybe<Array<Scalars['String']>>;
  issueLabel?: Maybe<IssueLabel>;
};

/** Autogenerated return type of EditIssue */
export type EditIssuePayload = {
  __typename?: 'EditIssuePayload';
  errors?: Maybe<Array<Scalars['String']>>;
  issue?: Maybe<Issue>;
};

export type Group = {
  __typename?: 'Group';
  id: Scalars['ID'];
  issueBoards: Array<IssueBoard>;
  logo?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  users: Array<User>;
};

/** Input object for Group */
export type GroupInputType = {
  /** Group name */
  name: Scalars['String'];
};

/** Autogenerated return type of Invite */
export type InvitePayload = {
  __typename?: 'InvitePayload';
  success: Scalars['Boolean'];
};

export type Issue = {
  __typename?: 'Issue';
  description?: Maybe<Scalars['String']>;
  dueDate?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  issueId: Scalars['ID'];
  issueLabel: IssueLabel;
  order: Scalars['Int'];
  title: Scalars['String'];
};

export type IssueBoard = {
  __typename?: 'IssueBoard';
  group?: Maybe<Group>;
  id: Scalars['ID'];
  issueLabels: Array<IssueLabel>;
  name: Scalars['String'];
  users?: Maybe<Array<User>>;
};

/** Input object for IssueBoard */
export type IssueBoardInputType = {
  /** IssueBoard name */
  name: Scalars['String'];
  /** Group ID */
  groupId?: Maybe<Scalars['ID']>;
};

/** Input object for Issue */
export type IssueInputType = {
  /** Title */
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  dueDate?: Maybe<Scalars['String']>;
  issueLabelId?: Maybe<Scalars['ID']>;
};

export type IssueLabel = {
  __typename?: 'IssueLabel';
  color?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  issueBoard: IssueBoard;
  issues: Array<Issue>;
  name: Scalars['String'];
  order: Scalars['Int'];
};

/** Input object for IssueLabel */
export type IssueLabelInputType = {
  /** IssueLabel name */
  name: Scalars['String'];
  /** Color of IssueLabel */
  color?: Maybe<Scalars['String']>;
  /** Id of issue_board */
  issueBoardId?: Maybe<Scalars['ID']>;
};

/** Autogenerated return type of JoinGroup */
export type JoinGroupPayload = {
  __typename?: 'JoinGroupPayload';
  errors?: Maybe<Array<Scalars['String']>>;
};

/** Autogenerated return type of Login */
export type LoginPayload = {
  __typename?: 'LoginPayload';
  accessToken?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  user?: Maybe<User>;
};

/** Autogenerated return type of MoveIssueLabel */
export type MoveIssueLabelPayload = {
  __typename?: 'MoveIssueLabelPayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of MoveIssue */
export type MoveIssuePayload = {
  __typename?: 'MoveIssuePayload';
  success: Scalars['Boolean'];
};

export type Mutation = {
  __typename?: 'Mutation';
  acceptInvite?: Maybe<AcceptInvitePayload>;
  createGroup?: Maybe<CreateGroupPayload>;
  createIssue?: Maybe<CreateIssuePayload>;
  createIssueBoard?: Maybe<CreateIssueBoardPayload>;
  createIssueLabel?: Maybe<CreateIssueLabelPayload>;
  createUser?: Maybe<CreateUserPayload>;
  declineInvite?: Maybe<DeclineInvitePayload>;
  deleteGroup?: Maybe<DeleteGroupPayload>;
  deleteIssue?: Maybe<DeleteIssuePayload>;
  deleteIssueBoard?: Maybe<DeleteIssueBoardPayload>;
  deleteIssueLabel?: Maybe<DeleteIssueLabelPayload>;
  deleteUser?: Maybe<DeleteUserPayload>;
  editGroup?: Maybe<EditGroupPayload>;
  editIssue?: Maybe<EditIssuePayload>;
  editIssueBoard?: Maybe<EditIssueBoardPayload>;
  editIssueLabel?: Maybe<EditIssueLabelPayload>;
  invite?: Maybe<InvitePayload>;
  joinGroup?: Maybe<JoinGroupPayload>;
  login?: Maybe<LoginPayload>;
  moveIssue?: Maybe<MoveIssuePayload>;
  moveIssueLabel?: Maybe<MoveIssueLabelPayload>;
};


export type MutationAcceptInviteArgs = {
  groupId: Scalars['ID'];
};


export type MutationCreateGroupArgs = {
  attributes: GroupInputType;
};


export type MutationCreateIssueArgs = {
  attributes: IssueInputType;
};


export type MutationCreateIssueBoardArgs = {
  attributes: IssueBoardInputType;
};


export type MutationCreateIssueLabelArgs = {
  attributes: IssueLabelInputType;
};


export type MutationCreateUserArgs = {
  attributes: UserInputType;
};


export type MutationDeclineInviteArgs = {
  groupId: Scalars['ID'];
};


export type MutationDeleteGroupArgs = {
  groupId: Scalars['ID'];
};


export type MutationDeleteIssueArgs = {
  issueId: Scalars['ID'];
};


export type MutationDeleteIssueBoardArgs = {
  issueBoardId: Scalars['ID'];
};


export type MutationDeleteIssueLabelArgs = {
  issueLabelId: Scalars['ID'];
};


export type MutationDeleteUserArgs = {
  userId: Scalars['ID'];
};


export type MutationEditGroupArgs = {
  attributes: GroupInputType;
  groupId: Scalars['ID'];
};


export type MutationEditIssueArgs = {
  attributes: IssueInputType;
  issueId: Scalars['ID'];
};


export type MutationEditIssueBoardArgs = {
  attributes: IssueBoardInputType;
  issueBoardId: Scalars['ID'];
};


export type MutationEditIssueLabelArgs = {
  attributes: IssueLabelInputType;
  issueLabelId: Scalars['ID'];
};


export type MutationInviteArgs = {
  groupId: Scalars['ID'];
  userEmail: Scalars['String'];
};


export type MutationJoinGroupArgs = {
  email: Scalars['String'];
  groupId: Scalars['ID'];
};


export type MutationLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationMoveIssueArgs = {
  issueLabelId: Scalars['ID'];
  issueId: Scalars['ID'];
  newOrder?: Maybe<Scalars['Int']>;
};


export type MutationMoveIssueLabelArgs = {
  issueLabelId: Scalars['ID'];
  newOrder: Scalars['Int'];
};

export type Query = {
  __typename?: 'Query';
  /** Returns currently logged in user */
  currentUser?: Maybe<User>;
  /** Returns a single Group that a user is a part of */
  group: Group;
  /** Returns a scoped list of all groups a member is a part of */
  groups: Array<Group>;
  hello: Scalars['String'];
  /** Returns all groups a user is invited to */
  invitedToGroups: Array<Group>;
  /** Returns a single Issue from a IssueBoard that a user i a part of */
  issue: Issue;
  /** Returns a single IssueBoardType that the user is a part of */
  issueBoard: IssueBoard;
  /** Login user return tokens */
  login: Scalars['String'];
  /** Returns all issueboards a user is a part of that is not in a group */
  notGroupIssueBoards: Array<IssueBoard>;
};


export type QueryGroupArgs = {
  groupId: Scalars['ID'];
};


export type QueryIssueArgs = {
  issueId: Scalars['ID'];
};


export type QueryIssueBoardArgs = {
  issueBoardId: Scalars['ID'];
};


export type QueryLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};

export type User = {
  __typename?: 'User';
  email: Scalars['String'];
  groups: Array<Group>;
  id: Scalars['ID'];
  issueBoards: Array<IssueBoard>;
  name: Scalars['String'];
};

/** Attributes for creating a user */
export type UserInputType = {
  /** Name of the user */
  name: Scalars['String'];
  /** Email of user */
  email: Scalars['String'];
  /** Password */
  password: Scalars['String'];
};

export type UserGroupsQueryVariables = Exact<{ [key: string]: never; }>;


export type UserGroupsQuery = (
  { __typename?: 'Query' }
  & { groups: Array<(
    { __typename?: 'Group' }
    & Pick<Group, 'id' | 'name' | 'logo'>
  )> }
);

export type UserInvitedGroupsQueryVariables = Exact<{ [key: string]: never; }>;


export type UserInvitedGroupsQuery = (
  { __typename?: 'Query' }
  & { invitedToGroups: Array<(
    { __typename?: 'Group' }
    & Pick<Group, 'id' | 'name' | 'logo'>
  )> }
);

export type GroupQueryVariables = Exact<{
  groupId: Scalars['ID'];
}>;


export type GroupQuery = (
  { __typename?: 'Query' }
  & { group: (
    { __typename?: 'Group' }
    & Pick<Group, 'id' | 'name' | 'logo'>
    & { users: Array<(
      { __typename?: 'User' }
      & Pick<User, 'name' | 'email'>
    )>, issueBoards: Array<(
      { __typename?: 'IssueBoard' }
      & Pick<IssueBoard, 'id' | 'name'>
    )> }
  ) }
);

export type CreateGroupMutationVariables = Exact<{
  attributes: GroupInputType;
}>;


export type CreateGroupMutation = (
  { __typename?: 'Mutation' }
  & { createGroup?: Maybe<(
    { __typename?: 'CreateGroupPayload' }
    & Pick<CreateGroupPayload, 'errors'>
  )> }
);

export type InviteMutationVariables = Exact<{
  groupId: Scalars['ID'];
  userEmail: Scalars['String'];
}>;


export type InviteMutation = (
  { __typename?: 'Mutation' }
  & { invite?: Maybe<(
    { __typename?: 'InvitePayload' }
    & Pick<InvitePayload, 'success'>
  )> }
);

export type AcceptInviteMutationVariables = Exact<{
  groupId: Scalars['ID'];
}>;


export type AcceptInviteMutation = (
  { __typename?: 'Mutation' }
  & { acceptInvite?: Maybe<(
    { __typename?: 'AcceptInvitePayload' }
    & Pick<AcceptInvitePayload, 'success'>
  )> }
);

export type DeclineInviteMutationVariables = Exact<{
  groupId: Scalars['ID'];
}>;


export type DeclineInviteMutation = (
  { __typename?: 'Mutation' }
  & { declineInvite?: Maybe<(
    { __typename?: 'DeclineInvitePayload' }
    & Pick<DeclineInvitePayload, 'success'>
  )> }
);

export type CreateIssueMutationVariables = Exact<{
  attributes: IssueInputType;
}>;


export type CreateIssueMutation = (
  { __typename?: 'Mutation' }
  & { createIssue?: Maybe<(
    { __typename?: 'CreateIssuePayload' }
    & Pick<CreateIssuePayload, 'errors'>
    & { issue?: Maybe<(
      { __typename?: 'Issue' }
      & Pick<Issue, 'id' | 'title'>
    )> }
  )> }
);

export type EditIssueMutationVariables = Exact<{
  attributes: IssueInputType;
  issueID: Scalars['ID'];
}>;


export type EditIssueMutation = (
  { __typename?: 'Mutation' }
  & { editIssue?: Maybe<(
    { __typename?: 'EditIssuePayload' }
    & Pick<EditIssuePayload, 'errors'>
  )> }
);

export type MoveIssueMutationVariables = Exact<{
  issueId: Scalars['ID'];
  issueLabelId: Scalars['ID'];
  newOrder?: Maybe<Scalars['Int']>;
}>;


export type MoveIssueMutation = (
  { __typename?: 'Mutation' }
  & { moveIssue?: Maybe<(
    { __typename?: 'MoveIssuePayload' }
    & Pick<MoveIssuePayload, 'success'>
  )> }
);

export type DeleteIssueMutationVariables = Exact<{
  issueId: Scalars['ID'];
}>;


export type DeleteIssueMutation = (
  { __typename?: 'Mutation' }
  & { deleteIssue?: Maybe<(
    { __typename?: 'DeleteIssuePayload' }
    & Pick<DeleteIssuePayload, 'success'>
  )> }
);

export type IssueBoardsQueryVariables = Exact<{ [key: string]: never; }>;


export type IssueBoardsQuery = (
  { __typename?: 'Query' }
  & { notGroupIssueBoards: Array<(
    { __typename?: 'IssueBoard' }
    & Pick<IssueBoard, 'name' | 'id'>
  )> }
);

export type IssueBoardQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type IssueBoardQuery = (
  { __typename?: 'Query' }
  & { issueBoard: (
    { __typename?: 'IssueBoard' }
    & Pick<IssueBoard, 'id' | 'name'>
    & { issueLabels: Array<(
      { __typename?: 'IssueLabel' }
      & Pick<IssueLabel, 'id' | 'name' | 'color' | 'order'>
      & { issues: Array<(
        { __typename?: 'Issue' }
        & Pick<Issue, 'id' | 'title' | 'issueId' | 'dueDate' | 'order'>
      )> }
    )> }
  ) }
);

export type CreateIssueBoardMutationVariables = Exact<{
  attributes: IssueBoardInputType;
}>;


export type CreateIssueBoardMutation = (
  { __typename?: 'Mutation' }
  & { createIssueBoard?: Maybe<(
    { __typename?: 'CreateIssueBoardPayload' }
    & { issueBoard?: Maybe<(
      { __typename?: 'IssueBoard' }
      & Pick<IssueBoard, 'id' | 'name'>
    )> }
  )> }
);

export type EditIssueBoardMutationVariables = Exact<{
  attributes: IssueBoardInputType;
  issueBoardId: Scalars['ID'];
}>;


export type EditIssueBoardMutation = (
  { __typename?: 'Mutation' }
  & { editIssueBoard?: Maybe<(
    { __typename?: 'EditIssueBoardPayload' }
    & Pick<EditIssueBoardPayload, 'errors'>
  )> }
);

export type DeleteIssueBoardMutationVariables = Exact<{
  issueBoardId: Scalars['ID'];
}>;


export type DeleteIssueBoardMutation = (
  { __typename?: 'Mutation' }
  & { deleteIssueBoard?: Maybe<(
    { __typename?: 'DeleteIssueBoardPayload' }
    & Pick<DeleteIssueBoardPayload, 'success'>
  )> }
);

export type CreateIssueLabelMutationVariables = Exact<{
  attributes: IssueLabelInputType;
}>;


export type CreateIssueLabelMutation = (
  { __typename?: 'Mutation' }
  & { createIssueLabel?: Maybe<(
    { __typename?: 'CreateIssueLabelPayload' }
    & Pick<CreateIssueLabelPayload, 'errors'>
    & { issueLabel?: Maybe<(
      { __typename?: 'IssueLabel' }
      & Pick<IssueLabel, 'id'>
    )> }
  )> }
);

export type MoveIssueLabelMutationVariables = Exact<{
  issueLabelId: Scalars['ID'];
  newOrder: Scalars['Int'];
}>;


export type MoveIssueLabelMutation = (
  { __typename?: 'Mutation' }
  & { moveIssueLabel?: Maybe<(
    { __typename?: 'MoveIssueLabelPayload' }
    & Pick<MoveIssueLabelPayload, 'success'>
  )> }
);

export type DeleteIssueLabelMutationVariables = Exact<{
  issueLabelId: Scalars['ID'];
}>;


export type DeleteIssueLabelMutation = (
  { __typename?: 'Mutation' }
  & { deleteIssueLabel?: Maybe<(
    { __typename?: 'DeleteIssueLabelPayload' }
    & Pick<DeleteIssueLabelPayload, 'success'>
  )> }
);

export type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'email' | 'name'>
  )> }
);

export type CreateUserMutationVariables = Exact<{
  attributes: UserInputType;
}>;


export type CreateUserMutation = (
  { __typename?: 'Mutation' }
  & { createUser?: Maybe<(
    { __typename?: 'CreateUserPayload' }
    & Pick<CreateUserPayload, 'accessToken' | 'errors'>
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'name' | 'email'>
    )> }
  )> }
);

export type LoginMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type LoginMutation = (
  { __typename?: 'Mutation' }
  & { login?: Maybe<(
    { __typename?: 'LoginPayload' }
    & Pick<LoginPayload, 'accessToken' | 'errors'>
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'email' | 'name'>
    )> }
  )> }
);


export const UserGroupsDocument = gql`
    query UserGroups {
  groups {
    id
    name
    logo
  }
}
    `;

/**
 * __useUserGroupsQuery__
 *
 * To run a query within a React component, call `useUserGroupsQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserGroupsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserGroupsQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserGroupsQuery(baseOptions?: Apollo.QueryHookOptions<UserGroupsQuery, UserGroupsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserGroupsQuery, UserGroupsQueryVariables>(UserGroupsDocument, options);
      }
export function useUserGroupsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserGroupsQuery, UserGroupsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserGroupsQuery, UserGroupsQueryVariables>(UserGroupsDocument, options);
        }
export type UserGroupsQueryHookResult = ReturnType<typeof useUserGroupsQuery>;
export type UserGroupsLazyQueryHookResult = ReturnType<typeof useUserGroupsLazyQuery>;
export type UserGroupsQueryResult = Apollo.QueryResult<UserGroupsQuery, UserGroupsQueryVariables>;
export const UserInvitedGroupsDocument = gql`
    query UserInvitedGroups {
  invitedToGroups {
    id
    name
    logo
  }
}
    `;

/**
 * __useUserInvitedGroupsQuery__
 *
 * To run a query within a React component, call `useUserInvitedGroupsQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserInvitedGroupsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserInvitedGroupsQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserInvitedGroupsQuery(baseOptions?: Apollo.QueryHookOptions<UserInvitedGroupsQuery, UserInvitedGroupsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserInvitedGroupsQuery, UserInvitedGroupsQueryVariables>(UserInvitedGroupsDocument, options);
      }
export function useUserInvitedGroupsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserInvitedGroupsQuery, UserInvitedGroupsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserInvitedGroupsQuery, UserInvitedGroupsQueryVariables>(UserInvitedGroupsDocument, options);
        }
export type UserInvitedGroupsQueryHookResult = ReturnType<typeof useUserInvitedGroupsQuery>;
export type UserInvitedGroupsLazyQueryHookResult = ReturnType<typeof useUserInvitedGroupsLazyQuery>;
export type UserInvitedGroupsQueryResult = Apollo.QueryResult<UserInvitedGroupsQuery, UserInvitedGroupsQueryVariables>;
export const GroupDocument = gql`
    query Group($groupId: ID!) {
  group(groupId: $groupId) {
    id
    name
    logo
    users {
      name
      email
    }
    issueBoards {
      id
      name
    }
  }
}
    `;

/**
 * __useGroupQuery__
 *
 * To run a query within a React component, call `useGroupQuery` and pass it any options that fit your needs.
 * When your component renders, `useGroupQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGroupQuery({
 *   variables: {
 *      groupId: // value for 'groupId'
 *   },
 * });
 */
export function useGroupQuery(baseOptions: Apollo.QueryHookOptions<GroupQuery, GroupQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GroupQuery, GroupQueryVariables>(GroupDocument, options);
      }
export function useGroupLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GroupQuery, GroupQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GroupQuery, GroupQueryVariables>(GroupDocument, options);
        }
export type GroupQueryHookResult = ReturnType<typeof useGroupQuery>;
export type GroupLazyQueryHookResult = ReturnType<typeof useGroupLazyQuery>;
export type GroupQueryResult = Apollo.QueryResult<GroupQuery, GroupQueryVariables>;
export const CreateGroupDocument = gql`
    mutation CreateGroup($attributes: GroupInputType!) {
  createGroup(attributes: $attributes) {
    errors
  }
}
    `;
export type CreateGroupMutationFn = Apollo.MutationFunction<CreateGroupMutation, CreateGroupMutationVariables>;

/**
 * __useCreateGroupMutation__
 *
 * To run a mutation, you first call `useCreateGroupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateGroupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createGroupMutation, { data, loading, error }] = useCreateGroupMutation({
 *   variables: {
 *      attributes: // value for 'attributes'
 *   },
 * });
 */
export function useCreateGroupMutation(baseOptions?: Apollo.MutationHookOptions<CreateGroupMutation, CreateGroupMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateGroupMutation, CreateGroupMutationVariables>(CreateGroupDocument, options);
      }
export type CreateGroupMutationHookResult = ReturnType<typeof useCreateGroupMutation>;
export type CreateGroupMutationResult = Apollo.MutationResult<CreateGroupMutation>;
export type CreateGroupMutationOptions = Apollo.BaseMutationOptions<CreateGroupMutation, CreateGroupMutationVariables>;
export const InviteDocument = gql`
    mutation Invite($groupId: ID!, $userEmail: String!) {
  invite(groupId: $groupId, userEmail: $userEmail) {
    success
  }
}
    `;
export type InviteMutationFn = Apollo.MutationFunction<InviteMutation, InviteMutationVariables>;

/**
 * __useInviteMutation__
 *
 * To run a mutation, you first call `useInviteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInviteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [inviteMutation, { data, loading, error }] = useInviteMutation({
 *   variables: {
 *      groupId: // value for 'groupId'
 *      userEmail: // value for 'userEmail'
 *   },
 * });
 */
export function useInviteMutation(baseOptions?: Apollo.MutationHookOptions<InviteMutation, InviteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<InviteMutation, InviteMutationVariables>(InviteDocument, options);
      }
export type InviteMutationHookResult = ReturnType<typeof useInviteMutation>;
export type InviteMutationResult = Apollo.MutationResult<InviteMutation>;
export type InviteMutationOptions = Apollo.BaseMutationOptions<InviteMutation, InviteMutationVariables>;
export const AcceptInviteDocument = gql`
    mutation AcceptInvite($groupId: ID!) {
  acceptInvite(groupId: $groupId) {
    success
  }
}
    `;
export type AcceptInviteMutationFn = Apollo.MutationFunction<AcceptInviteMutation, AcceptInviteMutationVariables>;

/**
 * __useAcceptInviteMutation__
 *
 * To run a mutation, you first call `useAcceptInviteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAcceptInviteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [acceptInviteMutation, { data, loading, error }] = useAcceptInviteMutation({
 *   variables: {
 *      groupId: // value for 'groupId'
 *   },
 * });
 */
export function useAcceptInviteMutation(baseOptions?: Apollo.MutationHookOptions<AcceptInviteMutation, AcceptInviteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AcceptInviteMutation, AcceptInviteMutationVariables>(AcceptInviteDocument, options);
      }
export type AcceptInviteMutationHookResult = ReturnType<typeof useAcceptInviteMutation>;
export type AcceptInviteMutationResult = Apollo.MutationResult<AcceptInviteMutation>;
export type AcceptInviteMutationOptions = Apollo.BaseMutationOptions<AcceptInviteMutation, AcceptInviteMutationVariables>;
export const DeclineInviteDocument = gql`
    mutation DeclineInvite($groupId: ID!) {
  declineInvite(groupId: $groupId) {
    success
  }
}
    `;
export type DeclineInviteMutationFn = Apollo.MutationFunction<DeclineInviteMutation, DeclineInviteMutationVariables>;

/**
 * __useDeclineInviteMutation__
 *
 * To run a mutation, you first call `useDeclineInviteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeclineInviteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [declineInviteMutation, { data, loading, error }] = useDeclineInviteMutation({
 *   variables: {
 *      groupId: // value for 'groupId'
 *   },
 * });
 */
export function useDeclineInviteMutation(baseOptions?: Apollo.MutationHookOptions<DeclineInviteMutation, DeclineInviteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeclineInviteMutation, DeclineInviteMutationVariables>(DeclineInviteDocument, options);
      }
export type DeclineInviteMutationHookResult = ReturnType<typeof useDeclineInviteMutation>;
export type DeclineInviteMutationResult = Apollo.MutationResult<DeclineInviteMutation>;
export type DeclineInviteMutationOptions = Apollo.BaseMutationOptions<DeclineInviteMutation, DeclineInviteMutationVariables>;
export const CreateIssueDocument = gql`
    mutation CreateIssue($attributes: IssueInputType!) {
  createIssue(attributes: $attributes) {
    issue {
      id
      title
    }
    errors
  }
}
    `;
export type CreateIssueMutationFn = Apollo.MutationFunction<CreateIssueMutation, CreateIssueMutationVariables>;

/**
 * __useCreateIssueMutation__
 *
 * To run a mutation, you first call `useCreateIssueMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateIssueMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createIssueMutation, { data, loading, error }] = useCreateIssueMutation({
 *   variables: {
 *      attributes: // value for 'attributes'
 *   },
 * });
 */
export function useCreateIssueMutation(baseOptions?: Apollo.MutationHookOptions<CreateIssueMutation, CreateIssueMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateIssueMutation, CreateIssueMutationVariables>(CreateIssueDocument, options);
      }
export type CreateIssueMutationHookResult = ReturnType<typeof useCreateIssueMutation>;
export type CreateIssueMutationResult = Apollo.MutationResult<CreateIssueMutation>;
export type CreateIssueMutationOptions = Apollo.BaseMutationOptions<CreateIssueMutation, CreateIssueMutationVariables>;
export const EditIssueDocument = gql`
    mutation EditIssue($attributes: IssueInputType!, $issueID: ID!) {
  editIssue(attributes: $attributes, issueId: $issueID) {
    errors
  }
}
    `;
export type EditIssueMutationFn = Apollo.MutationFunction<EditIssueMutation, EditIssueMutationVariables>;

/**
 * __useEditIssueMutation__
 *
 * To run a mutation, you first call `useEditIssueMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditIssueMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editIssueMutation, { data, loading, error }] = useEditIssueMutation({
 *   variables: {
 *      attributes: // value for 'attributes'
 *      issueID: // value for 'issueID'
 *   },
 * });
 */
export function useEditIssueMutation(baseOptions?: Apollo.MutationHookOptions<EditIssueMutation, EditIssueMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<EditIssueMutation, EditIssueMutationVariables>(EditIssueDocument, options);
      }
export type EditIssueMutationHookResult = ReturnType<typeof useEditIssueMutation>;
export type EditIssueMutationResult = Apollo.MutationResult<EditIssueMutation>;
export type EditIssueMutationOptions = Apollo.BaseMutationOptions<EditIssueMutation, EditIssueMutationVariables>;
export const MoveIssueDocument = gql`
    mutation MoveIssue($issueId: ID!, $issueLabelId: ID!, $newOrder: Int) {
  moveIssue(issueId: $issueId, issueLabelId: $issueLabelId, newOrder: $newOrder) {
    success
  }
}
    `;
export type MoveIssueMutationFn = Apollo.MutationFunction<MoveIssueMutation, MoveIssueMutationVariables>;

/**
 * __useMoveIssueMutation__
 *
 * To run a mutation, you first call `useMoveIssueMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMoveIssueMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [moveIssueMutation, { data, loading, error }] = useMoveIssueMutation({
 *   variables: {
 *      issueId: // value for 'issueId'
 *      issueLabelId: // value for 'issueLabelId'
 *      newOrder: // value for 'newOrder'
 *   },
 * });
 */
export function useMoveIssueMutation(baseOptions?: Apollo.MutationHookOptions<MoveIssueMutation, MoveIssueMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MoveIssueMutation, MoveIssueMutationVariables>(MoveIssueDocument, options);
      }
export type MoveIssueMutationHookResult = ReturnType<typeof useMoveIssueMutation>;
export type MoveIssueMutationResult = Apollo.MutationResult<MoveIssueMutation>;
export type MoveIssueMutationOptions = Apollo.BaseMutationOptions<MoveIssueMutation, MoveIssueMutationVariables>;
export const DeleteIssueDocument = gql`
    mutation DeleteIssue($issueId: ID!) {
  deleteIssue(issueId: $issueId) {
    success
  }
}
    `;
export type DeleteIssueMutationFn = Apollo.MutationFunction<DeleteIssueMutation, DeleteIssueMutationVariables>;

/**
 * __useDeleteIssueMutation__
 *
 * To run a mutation, you first call `useDeleteIssueMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteIssueMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteIssueMutation, { data, loading, error }] = useDeleteIssueMutation({
 *   variables: {
 *      issueId: // value for 'issueId'
 *   },
 * });
 */
export function useDeleteIssueMutation(baseOptions?: Apollo.MutationHookOptions<DeleteIssueMutation, DeleteIssueMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteIssueMutation, DeleteIssueMutationVariables>(DeleteIssueDocument, options);
      }
export type DeleteIssueMutationHookResult = ReturnType<typeof useDeleteIssueMutation>;
export type DeleteIssueMutationResult = Apollo.MutationResult<DeleteIssueMutation>;
export type DeleteIssueMutationOptions = Apollo.BaseMutationOptions<DeleteIssueMutation, DeleteIssueMutationVariables>;
export const IssueBoardsDocument = gql`
    query IssueBoards {
  notGroupIssueBoards {
    name
    id
  }
}
    `;

/**
 * __useIssueBoardsQuery__
 *
 * To run a query within a React component, call `useIssueBoardsQuery` and pass it any options that fit your needs.
 * When your component renders, `useIssueBoardsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIssueBoardsQuery({
 *   variables: {
 *   },
 * });
 */
export function useIssueBoardsQuery(baseOptions?: Apollo.QueryHookOptions<IssueBoardsQuery, IssueBoardsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<IssueBoardsQuery, IssueBoardsQueryVariables>(IssueBoardsDocument, options);
      }
export function useIssueBoardsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IssueBoardsQuery, IssueBoardsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<IssueBoardsQuery, IssueBoardsQueryVariables>(IssueBoardsDocument, options);
        }
export type IssueBoardsQueryHookResult = ReturnType<typeof useIssueBoardsQuery>;
export type IssueBoardsLazyQueryHookResult = ReturnType<typeof useIssueBoardsLazyQuery>;
export type IssueBoardsQueryResult = Apollo.QueryResult<IssueBoardsQuery, IssueBoardsQueryVariables>;
export const IssueBoardDocument = gql`
    query IssueBoard($id: ID!) {
  issueBoard(issueBoardId: $id) {
    id
    name
    issueLabels {
      id
      name
      color
      order
      issues {
        id
        title
        issueId
        dueDate
        order
      }
    }
  }
}
    `;

/**
 * __useIssueBoardQuery__
 *
 * To run a query within a React component, call `useIssueBoardQuery` and pass it any options that fit your needs.
 * When your component renders, `useIssueBoardQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIssueBoardQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useIssueBoardQuery(baseOptions: Apollo.QueryHookOptions<IssueBoardQuery, IssueBoardQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<IssueBoardQuery, IssueBoardQueryVariables>(IssueBoardDocument, options);
      }
export function useIssueBoardLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IssueBoardQuery, IssueBoardQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<IssueBoardQuery, IssueBoardQueryVariables>(IssueBoardDocument, options);
        }
export type IssueBoardQueryHookResult = ReturnType<typeof useIssueBoardQuery>;
export type IssueBoardLazyQueryHookResult = ReturnType<typeof useIssueBoardLazyQuery>;
export type IssueBoardQueryResult = Apollo.QueryResult<IssueBoardQuery, IssueBoardQueryVariables>;
export const CreateIssueBoardDocument = gql`
    mutation CreateIssueBoard($attributes: IssueBoardInputType!) {
  createIssueBoard(attributes: $attributes) {
    issueBoard {
      id
      name
    }
  }
}
    `;
export type CreateIssueBoardMutationFn = Apollo.MutationFunction<CreateIssueBoardMutation, CreateIssueBoardMutationVariables>;

/**
 * __useCreateIssueBoardMutation__
 *
 * To run a mutation, you first call `useCreateIssueBoardMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateIssueBoardMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createIssueBoardMutation, { data, loading, error }] = useCreateIssueBoardMutation({
 *   variables: {
 *      attributes: // value for 'attributes'
 *   },
 * });
 */
export function useCreateIssueBoardMutation(baseOptions?: Apollo.MutationHookOptions<CreateIssueBoardMutation, CreateIssueBoardMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateIssueBoardMutation, CreateIssueBoardMutationVariables>(CreateIssueBoardDocument, options);
      }
export type CreateIssueBoardMutationHookResult = ReturnType<typeof useCreateIssueBoardMutation>;
export type CreateIssueBoardMutationResult = Apollo.MutationResult<CreateIssueBoardMutation>;
export type CreateIssueBoardMutationOptions = Apollo.BaseMutationOptions<CreateIssueBoardMutation, CreateIssueBoardMutationVariables>;
export const EditIssueBoardDocument = gql`
    mutation EditIssueBoard($attributes: IssueBoardInputType!, $issueBoardId: ID!) {
  editIssueBoard(attributes: $attributes, issueBoardId: $issueBoardId) {
    errors
  }
}
    `;
export type EditIssueBoardMutationFn = Apollo.MutationFunction<EditIssueBoardMutation, EditIssueBoardMutationVariables>;

/**
 * __useEditIssueBoardMutation__
 *
 * To run a mutation, you first call `useEditIssueBoardMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditIssueBoardMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editIssueBoardMutation, { data, loading, error }] = useEditIssueBoardMutation({
 *   variables: {
 *      attributes: // value for 'attributes'
 *      issueBoardId: // value for 'issueBoardId'
 *   },
 * });
 */
export function useEditIssueBoardMutation(baseOptions?: Apollo.MutationHookOptions<EditIssueBoardMutation, EditIssueBoardMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<EditIssueBoardMutation, EditIssueBoardMutationVariables>(EditIssueBoardDocument, options);
      }
export type EditIssueBoardMutationHookResult = ReturnType<typeof useEditIssueBoardMutation>;
export type EditIssueBoardMutationResult = Apollo.MutationResult<EditIssueBoardMutation>;
export type EditIssueBoardMutationOptions = Apollo.BaseMutationOptions<EditIssueBoardMutation, EditIssueBoardMutationVariables>;
export const DeleteIssueBoardDocument = gql`
    mutation DeleteIssueBoard($issueBoardId: ID!) {
  deleteIssueBoard(issueBoardId: $issueBoardId) {
    success
  }
}
    `;
export type DeleteIssueBoardMutationFn = Apollo.MutationFunction<DeleteIssueBoardMutation, DeleteIssueBoardMutationVariables>;

/**
 * __useDeleteIssueBoardMutation__
 *
 * To run a mutation, you first call `useDeleteIssueBoardMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteIssueBoardMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteIssueBoardMutation, { data, loading, error }] = useDeleteIssueBoardMutation({
 *   variables: {
 *      issueBoardId: // value for 'issueBoardId'
 *   },
 * });
 */
export function useDeleteIssueBoardMutation(baseOptions?: Apollo.MutationHookOptions<DeleteIssueBoardMutation, DeleteIssueBoardMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteIssueBoardMutation, DeleteIssueBoardMutationVariables>(DeleteIssueBoardDocument, options);
      }
export type DeleteIssueBoardMutationHookResult = ReturnType<typeof useDeleteIssueBoardMutation>;
export type DeleteIssueBoardMutationResult = Apollo.MutationResult<DeleteIssueBoardMutation>;
export type DeleteIssueBoardMutationOptions = Apollo.BaseMutationOptions<DeleteIssueBoardMutation, DeleteIssueBoardMutationVariables>;
export const CreateIssueLabelDocument = gql`
    mutation createIssueLabel($attributes: IssueLabelInputType!) {
  createIssueLabel(attributes: $attributes) {
    issueLabel {
      id
    }
    errors
  }
}
    `;
export type CreateIssueLabelMutationFn = Apollo.MutationFunction<CreateIssueLabelMutation, CreateIssueLabelMutationVariables>;

/**
 * __useCreateIssueLabelMutation__
 *
 * To run a mutation, you first call `useCreateIssueLabelMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateIssueLabelMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createIssueLabelMutation, { data, loading, error }] = useCreateIssueLabelMutation({
 *   variables: {
 *      attributes: // value for 'attributes'
 *   },
 * });
 */
export function useCreateIssueLabelMutation(baseOptions?: Apollo.MutationHookOptions<CreateIssueLabelMutation, CreateIssueLabelMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateIssueLabelMutation, CreateIssueLabelMutationVariables>(CreateIssueLabelDocument, options);
      }
export type CreateIssueLabelMutationHookResult = ReturnType<typeof useCreateIssueLabelMutation>;
export type CreateIssueLabelMutationResult = Apollo.MutationResult<CreateIssueLabelMutation>;
export type CreateIssueLabelMutationOptions = Apollo.BaseMutationOptions<CreateIssueLabelMutation, CreateIssueLabelMutationVariables>;
export const MoveIssueLabelDocument = gql`
    mutation MoveIssueLabel($issueLabelId: ID!, $newOrder: Int!) {
  moveIssueLabel(issueLabelId: $issueLabelId, newOrder: $newOrder) {
    success
  }
}
    `;
export type MoveIssueLabelMutationFn = Apollo.MutationFunction<MoveIssueLabelMutation, MoveIssueLabelMutationVariables>;

/**
 * __useMoveIssueLabelMutation__
 *
 * To run a mutation, you first call `useMoveIssueLabelMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMoveIssueLabelMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [moveIssueLabelMutation, { data, loading, error }] = useMoveIssueLabelMutation({
 *   variables: {
 *      issueLabelId: // value for 'issueLabelId'
 *      newOrder: // value for 'newOrder'
 *   },
 * });
 */
export function useMoveIssueLabelMutation(baseOptions?: Apollo.MutationHookOptions<MoveIssueLabelMutation, MoveIssueLabelMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MoveIssueLabelMutation, MoveIssueLabelMutationVariables>(MoveIssueLabelDocument, options);
      }
export type MoveIssueLabelMutationHookResult = ReturnType<typeof useMoveIssueLabelMutation>;
export type MoveIssueLabelMutationResult = Apollo.MutationResult<MoveIssueLabelMutation>;
export type MoveIssueLabelMutationOptions = Apollo.BaseMutationOptions<MoveIssueLabelMutation, MoveIssueLabelMutationVariables>;
export const DeleteIssueLabelDocument = gql`
    mutation DeleteIssueLabel($issueLabelId: ID!) {
  deleteIssueLabel(issueLabelId: $issueLabelId) {
    success
  }
}
    `;
export type DeleteIssueLabelMutationFn = Apollo.MutationFunction<DeleteIssueLabelMutation, DeleteIssueLabelMutationVariables>;

/**
 * __useDeleteIssueLabelMutation__
 *
 * To run a mutation, you first call `useDeleteIssueLabelMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteIssueLabelMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteIssueLabelMutation, { data, loading, error }] = useDeleteIssueLabelMutation({
 *   variables: {
 *      issueLabelId: // value for 'issueLabelId'
 *   },
 * });
 */
export function useDeleteIssueLabelMutation(baseOptions?: Apollo.MutationHookOptions<DeleteIssueLabelMutation, DeleteIssueLabelMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteIssueLabelMutation, DeleteIssueLabelMutationVariables>(DeleteIssueLabelDocument, options);
      }
export type DeleteIssueLabelMutationHookResult = ReturnType<typeof useDeleteIssueLabelMutation>;
export type DeleteIssueLabelMutationResult = Apollo.MutationResult<DeleteIssueLabelMutation>;
export type DeleteIssueLabelMutationOptions = Apollo.BaseMutationOptions<DeleteIssueLabelMutation, DeleteIssueLabelMutationVariables>;
export const CurrentUserDocument = gql`
    query CurrentUser {
  currentUser {
    email
    name
  }
}
    `;

/**
 * __useCurrentUserQuery__
 *
 * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentUserQuery(baseOptions?: Apollo.QueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
      }
export function useCurrentUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
        }
export type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>;
export type CurrentUserLazyQueryHookResult = ReturnType<typeof useCurrentUserLazyQuery>;
export type CurrentUserQueryResult = Apollo.QueryResult<CurrentUserQuery, CurrentUserQueryVariables>;
export const CreateUserDocument = gql`
    mutation createUser($attributes: UserInputType!) {
  createUser(attributes: $attributes) {
    user {
      id
      name
      email
    }
    accessToken
    errors
  }
}
    `;
export type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      attributes: // value for 'attributes'
 *   },
 * });
 */
export function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, options);
      }
export type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;
export type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;
export type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;
export const LoginDocument = gql`
    mutation Login($email: String!, $password: String!) {
  login(email: $email, password: $password) {
    accessToken
    user {
      email
      name
    }
    errors
  }
}
    `;
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;